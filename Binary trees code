import java.util.LinkedList;
import java.util.Queue;

public class trees {
    static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    static class BinaryTree{
        static int idx=-1;
        public static Node builttree(int n[]){
            idx++;
            if(n[idx]==-1){
                return null;
            }
            Node nn=new Node(n[idx]);
            nn.left=builttree(n);
            nn.right=builttree(n);
            return nn;

        }
        public static void preorder(Node root){
            if(root==null){
                return;
            }
            System.out.println(root.data);
            preoreder(root.left);
            preoreder(root.right);
        }
        public static void inorder(Node root){
            if(root==null){
                return;
            }
            inorder(root.left);
            System.out.println(root.data);
            inorder(root.right);


        }
        public static void postorder(Node root){
            if(root==null){
                return;
            }
            postorder(root.left);
            postorder(root.right);
            System.out.println(root.data);
        }
        public static void levelorder(Node root){
            if(root==null){
                return;
            }
            Queue<Node> q1=new LinkedList<>();
            q1.add(root);
            q1.add(null);
            while(!q1.isEmpty()){
                Node c=q1.remove();
                if(c==null){
                    System.out.println();
                    if(q1.isEmpty()){
                        break;
                    }
                    else{
                        q1.add(null);
                    }
                }
                else{
                    System.out.print(c.data);
                    if(c.left!=null){
                        q1.add(c.left);
                    }
                    if(c.right!=null){
                        q1.add(c.right);
                    }
                }
            }
        }
        public static int height(Node root){
            if(root==null){
                return 0;
            }
            int lh=height(root.left);
            int rh=height(root.right);
            return Math.max(lh,rh)+1;
        }
        public static int count(Node root){
            if(root==null){
                return 0;
            }
            int lc=count(root.left);
            int rc=count(root.right);
            return lc+rc+1;
        }
        public static int sum(Node root){
            if (root == null) {
                return 0;
            }
            int lfs=sum(root.left);
            int rs=sum(root.right);
            return lfs+rs+root.data;
        }
    }

    public static void main(String args[]){
        int n[]={1,2,4,-1,-1,5,-1,-1,3,6,-1,-1,7,-1,-1};
        BinaryTree tree=new BinaryTree();
        Node f=tree.builttree(n);
        system.out.println(preoreder(f));
        system.out.println(inorder(f));
        system.out.println(postorder(f));
        system.out.println(leveloreder(f));
        system.out.println(sum(f));
        system.out.println(count(f));
        System.out.println(tree.sum(f));
    }
}
